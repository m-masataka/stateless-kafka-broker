name: Integration Test with TiKV Meta store/Index Store
on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Install MinIO client (mc)
      run: |
        curl -sSL https://dl.min.io/client/mc/release/linux-amd64/mc -o mc
        chmod +x mc
        sudo mv mc /usr/local/bin/

    - name: Wait for MinIO and create bucket
      run: |
        echo "Waiting for MinIO to be ready..."
        for i in {1..10}; do
          if curl -fs http://127.0.0.1:9000/minio/health/ready > /dev/null; then
            echo "MinIO is ready!"
            break
          fi
          echo "Waiting for MinIO... (${i})"
          sleep 2
        done

        echo "Setting mc alias and creating bucket"
        mc alias set local http://127.0.0.1:9000 minioadmin minioadmin
        mc mb local/mybucket || true

    - name: Wait for MinIO to be ready and create bucket
      run: |
        echo "Waiting for MinIO to be ready..."
        for i in {1..20}; do
          mc alias set local http://127.0.0.1:9000 minioadmin minioadmin && mc ls local/ && break
          echo "Waiting for MinIO... (${i})"
          sleep 3
        done

        echo "Creating bucket"
        mc mb local/mybucket || echo "Bucket already exists"

    # ===== TiKV Setup with TiUP playground ===== #
    - name: Install TiUP (TiKV playground)
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://tiup-mirrors.pingcap.com/install.sh | sh
        echo "$HOME/.tiup/bin" >> $GITHUB_PATH

    - name: Start PD+TiKV (background)
      shell: bash
      run: |
        source ~/.bashrc || true
        export PATH="$HOME/.tiup/bin:$PATH"
        # setup stable version
        tiup playground --without-monitor --db 0 --pd 1 --kv 1 --host 127.0.0.1 >/tmp/tiup.log 2>&1 &
        # health check (PD 2379/TiKV 20160)
        for i in {1..60}; do
          nc -z 127.0.0.1 2379 && nc -z 127.0.0.1 20160 && echo "TiKV up" && break
          echo "Waiting for TiKV... ($i)"
          sleep 2
        done
        if ! (nc -z 127.0.0.1 2379 && nc -z 127.0.0.1 20160); then
          echo "‚ùå TiKV not ready"
          tail -n 200 /tmp/tiup.log || true
          exit 1
        fi

    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Rust (rustup)
      run: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build broker
      run: cargo build --release

    - name: Confirm broker binary exists
      run: |
        ls -alh ./target/release/
        test -x ./target/release/stateless_kafka_broker || (echo "‚ùå Binary not found!" && exit 1)
      working-directory: ${{ github.workspace }}


    - name: Run Rust server in background
      env:
        RUST_LOG: debug
        KAFKA_HOST: 0.0.0.0
        KAFKA_PORT: 9092
        KAFKA_LOG_STORE_TYPE: s3
        KAFKA_LOG_STORE_S3_BUCKET: mybucket
        KAFKA_LOG_STORE_S3_PREFIX: logs
        KAFKA_LOG_STORE_S3_ENDPOINT: http://127.0.0.1:9000
        KAFKA_LOG_STORE_S3_ACCESS_KEY: minioadmin
        KAFKA_LOG_STORE_S3_SECRET_KEY: minioadmin
        KAFKA_META_STORE_TYPE: tikv
        KAFKA_META_STORE_TIKV_ENDPOINTS: 127.0.0.1:2379
        KAFKA_INDEX_STORE_TYPE: tikv
        KAFKA_INDEX_STORE_TIKV_ENDPOINTS: 127.0.0.1:2379
      run: |
        ./target/release/stateless_kafka_broker --config config/cluster.sample.json 2>&1 | tee rust-server.log &
      working-directory: ${{ github.workspace }}

    - name: Wait for Rust server to be ready
      run: |
        for i in {1..10}; do
          echo "Waiting for rust-server on port 9092..."
          nc -z localhost 9092 && echo "Ready!" && exit 0
          sleep 2
        done
        echo "‚ùå rust-server did not start in time"
        cat rust-server.log
        exit 1

    - name: Run tests
      run: cargo test --test kafka_client
      
    - name: Show rust-server.log if test fails
      if: failure()
      run: |
        echo "üîç Dumping rust-server.log due to test failure..."
        tail -n 200 rust-server.log || echo "‚ö†Ô∏è rust-server.log not found"

    - name: Upload rust-server.log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: rust-server-log
        path: |
          rust-server.log
          /tmp/tiup.log